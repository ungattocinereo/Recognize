#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Whisper
–°–∫—Ä–∏–ø—Ç –∏—â–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ .md —Ñ–∞–π–ª–æ–≤:
1. filename.md - –ø—Ä–æ—Å—Ç–∞—è –¥–æ—Å–ª–æ–≤–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
2. filename_accurate.md - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python audio_transcriber.py                    # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å medium (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    python audio_transcriber.py --model large      # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å large
    python audio_transcriber.py --list-models      # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
"""

import os
import glob
import whisper
import datetime
from pathlib import Path
import json
import argparse
import time
import subprocess
from tqdm import tqdm


def get_audio_files():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    audio_extensions = ['*.mp3', '*.wav', '*.m4a', '*.flac', '*.ogg', '*.wma', '*.aac']
    audio_files = []
    
    for extension in audio_extensions:
        audio_files.extend(glob.glob(extension))
    
    return audio_files


def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º {seconds}—Å"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"


def estimate_processing_time(file_size_mb, model_name):
    """–û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –º–æ–¥–µ–ª–∏"""
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ú–ë)
    model_coefficients = {
        'tiny': 0.1, 'tiny.en': 0.1,
        'base': 0.2, 'base.en': 0.2,
        'small': 0.4, 'small.en': 0.4,
        'medium': 0.8, 'medium.en': 0.8,
        'large-v1': 1.5, 'large-v2': 1.5, 'large-v3': 1.5, 'large': 1.5,
        'turbo': 0.6, 'large-v3-turbo': 0.6
    }
    
    coefficient = model_coefficients.get(model_name, 1.0)
    estimated_seconds = file_size_mb * coefficient
    return max(estimated_seconds, 10)  # –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥


def send_macos_notification(title, message, subtitle=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ macOS"""
    try:
        cmd = ['osascript', '-e', f'display notification "{message}" with title "{title}"']
        if subtitle:
            cmd = ['osascript', '-e', f'display notification "{message}" with title "{title}" subtitle "{subtitle}"']
        subprocess.run(cmd, check=True, capture_output=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


def create_smart_filename(base_name, extension, add_timestamp=True):
    """–°–æ–∑–¥–∞—Ç—å —É–º–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∏–∑–±–µ–∂–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    if add_timestamp:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"{base_name}_{timestamp}{extension}"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        counter = 1
        filename = f"{base_name}{extension}"
        while os.path.exists(filename):
            filename = f"{base_name}_{counter}{extension}"
            counter += 1
        return filename


def create_simple_markdown(audio_file, result):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π markdown —Ñ–∞–π–ª —Å –¥–æ—Å–ª–æ–≤–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π"""
    base_name = Path(audio_file).stem
    md_file = create_smart_filename(base_name, ".md", add_timestamp=False)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
    preview = result['text'].strip()[:50]
    if len(result['text'].strip()) > 50:
        preview += "..."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞
    content = f"""# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {audio_file}

{result['text'].strip()}
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(md_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return md_file, preview


def create_detailed_markdown(audio_file, result, model_name):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π markdown —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    base_name = Path(audio_file).stem
    md_file = create_smart_filename(f"{base_name}_accurate", ".md", add_timestamp=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(audio_file)
    file_size_mb = file_size / (1024 * 1024)
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞
    content = f"""# –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {audio_file}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
- **–ò–º—è —Ñ–∞–π–ª–∞**: `{audio_file}`
- **–†–∞–∑–º–µ—Ä**: {file_size_mb:.2f} –ú–ë
- **–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {timestamp}
- **–ú–æ–¥–µ–ª—å Whisper**: {model_name}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

### –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
```
{result['text'].strip()}
```

### –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'language' in result:
        content += f"- **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫**: {result['language']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'segments' in result and result['segments']:
        content += "\n### –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã\n\n"
        for i, segment in enumerate(result['segments'], 1):
            start_time = format_duration(segment['start'])
            end_time = format_duration(segment['end'])
            text = segment['text'].strip()
            content += f"**{i}. [{start_time} - {end_time}]**\n"
            content += f"```\n{text}\n```\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    content += f"""
### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {format_duration(result.get('segments', [{}])[-1].get('end', 0)) if result.get('segments') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**: {len(result.get('segments', []))}
- **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**: {sum(s.get('avg_logprob', 0) for s in result.get('segments', [])) / len(result.get('segments', [])) if result.get('segments') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

### –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)
<details>
<summary>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</summary>

```json
{json.dumps(result, ensure_ascii=False, indent=2)}
```
</details>

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é Whisper AI*
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(md_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return md_file


def transcribe_audio_file(audio_file, model, model_name):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ markdown —Ñ–∞–π–ª–æ–≤"""
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {audio_file}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(audio_file)
    file_size_mb = file_size / (1024 * 1024)
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    estimated_time = estimate_processing_time(file_size_mb, model_name)
    print(f"üï∞Ô∏è –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {format_duration(estimated_time)}")
    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë | –ú–æ–¥–µ–ª—å: {model_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ
    base_name = Path(audio_file).stem
    simple_md_file = f"{base_name}.md"
    detailed_md_file = f"{base_name}_accurate.md"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ timestamp)
    if os.path.exists(simple_md_file) and os.path.exists(detailed_md_file):
        print(f"‚ö†Ô∏è  –§–∞–π–ª—ã {simple_md_file} –∏ {detailed_md_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
        send_macos_notification("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Whisper", f"–§–∞–π–ª {audio_file} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return [simple_md_file, detailed_md_file], ""
    
    try:
        print("üéØ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        send_macos_notification("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {audio_file}", f"–û—Ü–µ–Ω–∫–∞: {format_duration(estimated_time)}")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        with tqdm(total=100, desc="üéß –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", unit="%", ncols=80, 
                  bar_format="{desc}: {percentage:3.0f}%|{bar}| {elapsed} < {remaining}") as pbar:
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = whisper.transcribe(
                model, 
                audio_file, 
                verbose=False,          # –û—Ç–∫–ª—é—á–∞–µ–º verbose –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                word_timestamps=True,   # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–æ–≤
                temperature=0.2         # –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            )
            pbar.update(100)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        processing_time = time.time() - start_time
        print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {format_duration(processing_time)}!")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–∞ markdown —Ñ–∞–π–ª–∞
        created_files = []
        preview_text = ""
        
        if not os.path.exists(simple_md_file):
            simple_file, preview = create_simple_markdown(audio_file, result)
            created_files.append(simple_file)
            preview_text = preview
            print(f"üìù –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª: {simple_file}")
        
        if not os.path.exists(detailed_md_file):
            detailed_file = create_detailed_markdown(audio_file, result, model_name)
            created_files.append(detailed_file)
            print(f"üìù –°–æ–∑–¥–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∞–π–ª: {detailed_file}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        send_macos_notification("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!", f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {audio_file}", preview_text)
        
        return created_files, preview_text
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {audio_file}: {str(e)}"
        print(f"‚ùå {error_msg}")
        send_macos_notification("‚ùå –û—à–∏–±–∫–∞", error_msg, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª")
        return [], ""


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Whisper"
    )
    parser.add_argument(
        '--model', 
        default='medium',
        help='–ú–æ–¥–µ–ª—å Whisper –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: medium)'
    )
    parser.add_argument(
        '--list-models',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏'
    )
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if args.list_models:
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Whisper:")
        models = ['tiny', 'tiny.en', 'base', 'base.en', 'small', 'small.en', 
                 'medium', 'medium.en', 'large-v1', 'large-v2', 'large-v3', 
                 'large', 'turbo', 'large-v3-turbo']
        for model in models:
            print(f"  - {model}")
        return
    
    print("üéµ –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    audio_files = get_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {', '.join(audio_files)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print(f"üöÄ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper {args.model}...")
    model = whisper.load_model(args.model)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    all_created_files = []
    all_words_count = 0
    all_languages = set()
    start_session_time = time.time()
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(audio_files)} —Ñ–∞–π–ª–æ–≤...\n")
    
    for i, audio_file in enumerate(audio_files, 1):
        print(f"\n=== –§–∞–π–ª {i}/{len(audio_files)} ===")
        created_files, preview = transcribe_audio_file(audio_file, model, args.model)
        all_created_files.extend(created_files)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        if preview:
            words_count = len(preview.split())
            all_words_count += words_count * 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        
        print(f"‚úÖ –§–∞–π–ª {audio_file} –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
    session_time = time.time() - start_session_time
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_created_files)}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {format_duration(session_time)}")
    if all_words_count > 0:
        print(f"üí¨ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {all_words_count:,}")
    
    if all_created_files:
        print("\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in all_created_files:
            file_type = "üìÑ –ü—Ä–æ—Å—Ç–æ–π" if not file.endswith("_accurate.md") else "üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π"
            print(f"  {file_type}: {file}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if len(audio_files) > 1:
        summary = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(audio_files)} —Ñ–∞–π–ª–æ–≤ –∑–∞ {format_duration(session_time)}"
        send_macos_notification("üéÜ –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!", summary, f"–°–æ–∑–¥–∞–Ω–æ {len(all_created_files)} —Ñ–∞–π–ª–æ–≤")


if __name__ == "__main__":
    main()