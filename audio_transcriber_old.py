#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Whisper
–°–∫—Ä–∏–ø—Ç –∏—â–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ .md —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import os
import glob
import whisper
import datetime
from pathlib import Path
import json


def get_audio_files():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    audio_extensions = ['*.mp3', '*.wav', '*.m4a', '*.flac', '*.ogg', '*.wma', '*.aac']
    audio_files = []
    
    for extension in audio_extensions:
        audio_files.extend(glob.glob(extension))
    
    return audio_files


def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º {seconds}—Å"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"


def create_markdown_report(audio_file, result):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π markdown —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    base_name = Path(audio_file).stem
    md_file = f"{base_name}.md"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(audio_file)
    file_size_mb = file_size / (1024 * 1024)
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞
    content = f"""# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
- **–ò–º—è —Ñ–∞–π–ª–∞**: `{audio_file}`
- **–†–∞–∑–º–µ—Ä**: {file_size_mb:.2f} –ú–ë
- **–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {timestamp}
- **–ú–æ–¥–µ–ª—å Whisper**: large-v3-turbo (—Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è)

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

### –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
```
{result['text'].strip()}
```

### –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'language' in result:
        content += f"- **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫**: {result['language']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'segments' in result and result['segments']:
        content += "\n### –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã\n\n"
        for i, segment in enumerate(result['segments'], 1):
            start_time = format_duration(segment['start'])
            end_time = format_duration(segment['end'])
            text = segment['text'].strip()
            content += f"**{i}. [{start_time} - {end_time}]**\n"
            content += f"```\n{text}\n```\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    content += f"""
### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {format_duration(result.get('segments', [{}])[-1].get('end', 0)) if result.get('segments') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**: {len(result.get('segments', []))}
- **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**: {sum(s.get('avg_logprob', 0) for s in result.get('segments', [])) / len(result.get('segments', [])) if result.get('segments') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

### –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)
<details>
<summary>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</summary>

```json
{json.dumps(result, ensure_ascii=False, indent=2)}
```
</details>

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é Whisper AI*
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(md_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return md_file


def transcribe_audio_file(audio_file, model):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {audio_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ .md —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ
    base_name = Path(audio_file).stem
    md_file = f"{base_name}.md"
    
    if os.path.exists(md_file):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {md_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
        return md_file
    
    try:
        print("üéØ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = whisper.transcribe(
            model, 
            audio_file, 
            verbose=True,           # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
            word_timestamps=True,   # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–æ–≤
            temperature=0.2         # –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        )
        
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º markdown —Ñ–∞–π–ª
        md_file = create_markdown_report(audio_file, result)
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {md_file}")
        
        return md_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {audio_file}: {str(e)}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    audio_files = get_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {', '.join(audio_files)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∏ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
    print("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper large-v3-turbo...")
    model = whisper.load_model("large-v3-turbo")
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    processed_files = []
    
    for audio_file in audio_files:
        md_file = transcribe_audio_file(audio_file, model)
        if md_file:
            processed_files.append(md_file)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_files)}")
    
    if processed_files:
        print("üìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in processed_files:
            print(f"  ‚Ä¢ {file}")


if __name__ == "__main__":
    main()